package main

import (
	"context"
	"fmt"
	"github.com/jackc/pgx/v5"
	"github.com/xuri/excelize/v2"
	"log"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"time"
)

type Payment struct {
	FileName        string
	PaymentSystem   string
	PaymentID       string
	Amount          float64
	AccountNumber   string
	PaymentDateTime time.Time
	UploadedAt      time.Time
}

func main() {
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
	conn, err := pgx.Connect(context.Background(), "postgres://postgres:Akramchik938747405@localhost:5432/payments?sslmode=disable")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	defer conn.Close(context.Background())

	files, err := filepath.Glob("data/*.xlsx")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Excel —Ñ–∞–π–ª–æ–≤: %v", err)
	}
	if len(files) == 0 {
		log.Println("–ù–µ—Ç Excel —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ ./data")
		return
	}

	for _, file := range files {
		fmt.Printf("üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: %s\n", file)
		if err := processFile(file, conn); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ %s: %v", file, err)
		}
	}

	fmt.Println("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
}

func processFile(path string, conn *pgx.Conn) error {
	f, err := excelize.OpenFile(path)
	if err != nil {
		return fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: %w", err)
	}
	defer func(f *excelize.File) {
		err := f.Close()
		if err != nil {

		}
	}(f)

	isAlif := strings.Contains(path, "–ê–ª–∏—Ñ")
	isZudamal := strings.Contains(path, "–ó—É–¥–∞–º–∞–ª")
	isIBT := strings.Contains(strings.ToLower(path), "–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω")
	isHumo := strings.Contains(path, "–•—É–º–æ")
	isShukr := strings.Contains(path, "–®—É–∫—Ä –ú–æ–ª–∏—è")
	isDushanbe := strings.Contains(path, "–î—É—à–∞–Ω–±–µ –°–∏—Ç–∏")

	if isAlif {
		return alifProccesFile(f, conn, path)
	}
	if isZudamal {
		return ZudamalProccesFile(f, conn, path)
	}
	if isIBT {
		return IbtProccesFile(f, conn, path)
	}
	if isHumo {
		return humoProccesFile(f, conn, path)
	}
	if isShukr {
		return shukrProccesFile(f, conn, path)
	}
	if isDushanbe {
		return dushanbeProccesFile(f, conn, path)
	}
	//

	return nil
}

func CleanAccount(raw string) string {
	// –£–±–∏—Ä–∞–µ–º –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏, –ø–ª—é—Å–∞, –ø—Ä–æ–±–µ–ª–∞ –∏ —Ç.–¥.
	re := regexp.MustCompile(`^\d+`)
	return re.FindString(raw)
}

func normalizeDateTime(value string) (time.Time, error) {
	value = strings.TrimSpace(value)

	// –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
	formats := []string{
		"02.01.06 15:04",
		"02.01.2006 15:04:05",
		"02.01.2006 15:04",
		"02.01.2006",
		"2006-01-02 15:04:05.000",
		"2006-01-02 15:04:05",
		"2006-01-02",
	}

	for _, layout := range formats {
		if t, err := time.Parse(layout, value); err == nil {
			return t, nil
		}
	}

	// –ü–æ–ø—ã—Ç–∫–∞ –∫–∞–∫ Excel-–¥–∞—Ç–∞ (–≤ –≤–∏–¥–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: "45500.5")
	if floatVal, err := strconv.ParseFloat(value, 64); err == nil {
		excelEpoch := time.Date(1899, 12, 30, 0, 0, 0, 0, time.UTC)
		t := excelEpoch.Add(time.Duration(floatVal * 24 * float64(time.Hour)))
		return t, nil
	}

	// –ü–æ–ø—ã—Ç–∫–∞ –∫–∞–∫ —á–∏—Å—Ç–æ–µ –≤—Ä–µ–º—è "349" / "161838"
	if len(value) <= 6 {
		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ HHMMSS (–¥–æ–±–∞–≤–∏–º –Ω—É–ª–∏ —Å–ø–µ—Ä–µ–¥–∏)
		for len(value) < 6 {
			value = "0" + value
		}
		if t, err := time.Parse("150405", value); err == nil {
			now := time.Now()
			return time.Date(now.Year(), now.Month(), now.Day(), t.Hour(), t.Minute(), t.Second(), 0, time.Local), nil
		}
	}

	// –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
	return time.Time{}, fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: %q", value)
}

func extractAndParseDateTime(s string) (time.Time, error) {
	// –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
	s = strings.TrimSpace(s)

	// –ò—â–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ 4-2-2 (–¥–∞—Ç–∞)
	reDate := regexp.MustCompile(`\d{4}-\d{2}-\d{2}`)
	datePart := reDate.FindString(s)

	// –ò—â–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ 2:2:2 (–≤—Ä–µ–º—è)
	reTime := regexp.MustCompile(`\d{2}:\d{2}:\d{2}`)
	timePart := reTime.FindString(s)

	if datePart == "" || timePart == "" {
		return time.Time{}, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫–µ: %q", s)
	}

	// –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –ø–∞—Ä—Å–∏–º
	combined := datePart + " " + timePart
	layout := "2006-01-02 15:04:05"

	t, err := time.Parse(layout, combined)
	if err != nil {
		return time.Time{}, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –¥–∞—Ç—É-–≤—Ä–µ–º—è: %v", err)
	}
	return t, nil
}

func parseAnyDateTime(value string) time.Time {
	value = strings.TrimSpace(value)

	// –ü–æ–ø—ã—Ç–∫–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞
	formats := []string{
		"02.01.06 15:04",
		"02.01.2006 15:04:05",
		"2006-01-02 15:04:05.000",
		"02.01.2006 15:04",
		"02.01.2006",
	}
	for _, layout := range formats {
		if t, err := time.Parse(layout, value); err == nil {
			return t
		}
	}

	// –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ Excel-–¥–∞—Ç–∞-—á–∏—Å–ª–æ
	if floatVal, err := strconv.ParseFloat(value, 64); err == nil {
		// Excel-–¥–∞—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1899-12-30
		excelEpoch := time.Date(1899, 12, 30, 0, 0, 0, 0, time.UTC)
		d := excelEpoch.Add(time.Duration(floatVal * 24 * float64(time.Hour)))
		return d
	}

	log.Printf("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: %q ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞", value)
	return time.Now()
}

func parseAmount(s string) float64 {
	s = strings.ReplaceAll(s, " ", "")
	s = strings.ReplaceAll(s, ",", ".")
	amount, _ := strconv.ParseFloat(s, 64)
	return amount
}

func insertPayment(conn *pgx.Conn, p Payment) error {
	_, err := conn.Exec(context.Background(),
		`INSERT INTO payments (file_name, payment_system, payment_id, amount, account_number, payment_datetime, uploaded_at)
		 VALUES ($1, $2, $3, $4, $5, $6, $7)`,
		p.FileName, p.PaymentSystem, p.PaymentID, p.Amount, p.AccountNumber, p.PaymentDateTime, p.UploadedAt)
	if err != nil {
		log.Println(err)
	}
	return err
}
